<%- layout("layouts/boilerplates") -%>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>

<style>
    /* Global styles */
    body {
        font-family: 'Poppins', sans-serif;
        line-height: 1.6;
        background-color: white;
        color: #333;
        margin: 0;
        padding: 0;
    }

    h2 {
        font-size: 2.2rem;
        color: #34495e;
        text-align: center;
        margin-bottom: 20px;
        font-weight: 600;
    }

    section {
        padding: 40px;
        background-color: #fff;
        margin: 20px auto;
        width: 85%;
        max-width: 1200px;
       
    }

    button {
        background-color: #3498db;
        color: white;
        padding: 10px 25px;
        border: none;
        border-radius: 25px;
        font-size: 1.1rem;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    button:hover {
        background-color: #2980b9;
        transform: translateY(-2px);
    }

    button:focus {
        outline: none;
        box-shadow: 0 0 5px rgba(0, 255, 0, 0.7);
    }

    #map {
        border-radius: 10px;
        margin: 20px auto;
        height: 500px;
        width: 100%;
    }

    /* Services Section */
    #services ul {
        list-style: none;
        padding: 0;
        display: flex;
        justify-content: center;
        gap: 15px;
        flex-wrap: wrap;
    }

    #services ul li {
        background-color: #ecf0f1;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 15px;
        width: 300px;
        font-size: 1.1rem;
        font-weight: 500;
        text-align: center;
        transition: transform 0.3s ease;
    }

    #services ul li:hover {
        transform: scale(1.05);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
    }

    /* Modal Styles */
    #electricianModal {
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        transition: opacity 0.4s ease;
    }

    .modal-content {
        background-color: white;
        padding: 30px;
        border-radius: 10px;
        width: 90%;
        max-width: 500px;
        text-align: left;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        position: relative;
        animation: slideIn 0.4s ease;
    }

    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .close {
        color: #aaa;
        position: absolute;
        top: 15px;
        right: 20px;
        font-size: 30px;
        cursor: pointer;
    }

    .close:hover {
        color: #e74c3c;
    }

    #electricianModal h2 {
        font-size: 1.8rem;
        margin-bottom: 15px;
    }

    #electricianModal p {
        margin: 8px 0;
        font-size: 1.1rem;
        color: #555;
    }

    #bookingForm input,
    #bookingForm textarea {
        width: 100%;
        padding: 12px;
        margin: 12px 0;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 1rem;
    }

    #bookingForm button {
        background-color: #1abc9c;
        color: white;
        padding: 12px;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        width: 100%;
        font-size: 1.2rem;
        transition: background-color 0.3s ease;
    }

    #bookingForm button:hover {
        background-color: #16a085;
    }

    footer {
        background-color: #34495e;
        color: white;
        padding: 20px;
        text-align: center;
        font-size: 1rem;
        position: relative;
        bottom: 0;
        width: 100%;
    }

    footer p {
        margin: 0;
        font-size: 1.1rem;
    }
    .main{
        display: flex;
    }
    .main img{
        height: 42rem;
    }
    .button{
        background-color: rebeccapurple !important;
    }
    button{
        background-color: rebeccapurple !important;
    }
    .modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1000; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgba(0, 0, 0, 0.5); /* Black w/ opacity */
}

.modal-content {
    background-color: #fefefe;
    margin: 2rem auto; /* 15% from the top and centered */
    padding: 20px;
    border: 1px solid #888;
    width: 50%; /* Could be more or less, depending on screen size */
    max-width: 600px; /* Optional: limit the max width */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    border-radius: 10px; /* Optional: rounded corners */
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}
    /* Tablet view (max-width: 768px) */
@media screen and (max-width: 768px) {
    section {
        padding: 20px;
        width: 90%;
    }

    #services ul {
        flex-direction: column;
        gap: 10px;
    }

    #services ul li {
        width: 100%;
    }

    .main {
        flex-direction: column;
    }

    .main img {
        height: auto;
        width: 100%;
    }

    #map {
        height: 400px;
    }

    .modal-content {
        width: 90%;
    }
}

/* Mobile view (max-width: 480px) */
@media screen and (max-width: 480px) {
    h2 {
        font-size: 1.6rem;
    }

    button {
        padding: 8px 20px;
        font-size: 1rem;
    }

    #map {
        height: 300px;
    }

    #services ul li {
        width: 100%;
        font-size: 1rem;
    }

    .modal-content {
        padding: 20px;
        font-size: 1rem;
    }

    footer {
        font-size: 0.9rem;
    }

    .main img {
        height: auto;
        width: 100%;
    }
    button{
        background-color: rebeccapurple !important;
    }
    section#home button {
    padding: 10px 20px;
    background-color: #333;
    color: #fff;
    border: none;
    font-size: x-small;
    border-radius: 5px;
    cursor: pointer;
}
}

</style>

<main>
    <div class="main">
 

   
    <section id="home">
        
        <button class="button" style="background-color: rebeccapurple;" onclick="findElectricians()">Find Nearest Electrician</button>
        <div id="map" style="height: 500px;"></div>
    </section>
    <img src="/photo/electrician.png" alt="">
</div>
    <section id="services">
        <h2>Our Services</h2>
        <ul>
            <li>Residential Electrical Services</li>
            <li>Commercial Electrical Services</li>
            <li>Emergency Repairs</li>
        </ul>
    </section>
</main>

<!-- Modal for Electrician Details and Booking -->
<div id="electricianModal" style="display:none; ">
    <div class="modal-content" style="display: flex; justify-self: center; align-self: center;">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2 id="electricianName"></h2>
        <p id="electricianLocation"></p>
        <p>Charges: <span id="electricianCharges"></span> INR</p>
        <p>Mobile No: <span id="electricianMobile"></span></p>
        <p>Experience: <span id="electricianExperience"></span> years</p>
        <p>Description: <span id="electricianDescription"></span></p>

        <form id="bookingForm" onsubmit="bookElectrician(event)">
            <input type="hidden" id="electricianId" required>
            <input type="hidden" id="userId" value="<%= currUser ? currUser._id : '' %>">
            <input type="text" id="customerName" placeholder="Your Name" required>
            <input type="text" id="customerAddress" placeholder="Your Address" required>
            <input type="text" id="customerMobile" placeholder="Your Mobile Number" required>
            <button type="submit" id="bookButton">Book Electrician</button>
        </form>

        <button id="unbookButton" style="display: none;" onclick="unbookElectrician()">Unbook Electrician</button>
    </div>
</div>

<!-- Booked Electrician Button (initially hidden) -->
<button id="bookedElectricianButton" style="display: none;" onclick="handleBookedElectrician()">Booked Electrician</button>

<script>
    // Initialize the map
    const map = L.map('map').setView([20.5937, 78.9629], 5); // Centered on India

    // Add OpenStreetMap tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Â© OpenStreetMap contributors'
    }).addTo(map);

    // Electricians data from backend
    const electricians = <%- JSON.stringify(electricians) %>;

    // Add markers for electricians
    electricians.forEach(function(electrician) {
        const marker = L.marker([electrician.lat, electrician.lon]).addTo(map);

        marker.on('click', function() {
            fillModalWithElectricianDetails(electrician);
            document.getElementById("electricianModal").style.display = "block";
        });
    });

    // Fill the modal with electrician details
    function fillModalWithElectricianDetails(electrician) {
        document.getElementById("electricianName").innerText = electrician.name;
        document.getElementById("electricianLocation").innerText = electrician.location;
        document.getElementById("electricianCharges").innerText = electrician.charges;
        document.getElementById("electricianMobile").innerText = electrician.contactNumber;
        document.getElementById("electricianExperience").innerText = electrician.experience;
        document.getElementById("electricianDescription").innerText = electrician.description;

        // Set the electrician ID in the booking form
        document.getElementById("electricianId").value = electrician._id;
        document.getElementById("userId").value = electrician.userId;

        // Check if already booked
        const bookingStatus = localStorage.getItem(`booked_${electrician._id}`);
        if (bookingStatus) {
            document.getElementById("unbookButton").style.display = "inline-block";
            document.getElementById("bookButton").style.display = "none";
        } else {
            document.getElementById("unbookButton").style.display = "none";
            document.getElementById("bookButton").style.display = "inline-block";
        }
    }

    // Close the modal
    function closeModal() {
        document.getElementById("electricianModal").style.display = "none";
    }

     // Function to book an electrician
     function bookElectrician(event) {
        event.preventDefault(); // Prevent default form submission

        const bookingDetails = {
            electricianId: document.getElementById('electricianId').value,
            customerName: document.getElementById('customerName').value,
            customerAddress: document.getElementById('customerAddress').value,
            customerMobile: document.getElementById('customerMobile').value,
            userId: document.getElementById('userId').value // Add this line
        };
console.log(bookingDetails.userId);

        // Send booking data to the backend
        fetch('/bookings/book', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(bookingDetails),
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                alert('Booking successful!');
                closeModal();
                document.getElementById('bookingForm').reset();

                // // Mark this electrician as booked in localStorage
                // localStorage.setItem(booked_${bookingDetails.electricianId}, 'true');

                // // Show the 'Unbook' button
                // document.getElementById('bookingForm').style.display = 'none';
                // document.getElementById('unbookButton').style.display = 'block';
          
            } else {
                alert('Booking failed: ' + data.error);
            }
        })
        .catch((error) => {
            console.error('Error during booking:', error);
            alert('Booking failed.');
        });
    }
// Function to unbook an electrician
async function unbookElectrician() {
    const electricianId = document.getElementById('electricianId').value;
    const currUserId = "<%= currUser.id %>";

    try {
        // Send DELETE request to the backend to unbook the electrician
        const response = await fetch(`bookings/unbook/${electricianId}/${currUserId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        // Check if the request was successful
        if (response.ok) {
            
        } else {
            // Handle any errors from the server
            const errorData = await response.json();
            alert(`Error unbooking electrician: ${errorData.message}`);
        }
    } catch (error) {
        // Handle network or other errors
        alert('An error occurred while unbooking the electrician. Please try again.');
        console.error('Error:', error);
    }
}





    


// Function to find the user's location and nearest electrician
function findElectricians() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPosition, showError, {
            enableHighAccuracy: true
        });
    } else {
        alert("Geolocation is not supported by this browser.");
    }
}

// Handle geolocation errors
function showError(error) {
    const errorMessages = {
        [error.PERMISSION_DENIED]: "User denied the request for Geolocation.",
        [error.POSITION_UNAVAILABLE]: "Location information is unavailable.",
        [error.TIMEOUT]: "The request to get user location timed out.",
    };
    alert(errorMessages[error.code] || "An unknown error occurred.");
}


function calculateDistance(lat1, lon1, lat2, lon2) {
const R = 6371; // Radius of the earth in km
const dLat = (lat2 - lat1) * Math.PI / 180;
const dLon = (lon2 - lon1) * Math.PI / 180;
const a = 
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon / 2) * Math.sin(dLon / 2);
const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
const distance = R * c; // Distance in km
return distance;
}

function showPosition(position) {
const userLat = position.coords.latitude;
const userLon = position.coords.longitude;

// Add user's marker to the map
const userMarker = L.marker([userLat, userLon]).addTo(map)
    .bindPopup('You are here!')
    .openPopup();

// Find the nearest electrician based on the shortest distance
let nearestElectrician = null;
let shortestDistance = Infinity;

electricians.forEach(function(electrician) {
    const distance = calculateDistance(userLat, userLon, electrician.lat, electrician.lon);
    if (distance < shortestDistance) {
        shortestDistance = distance;
        nearestElectrician = electrician;
    }
    
});

if (nearestElectrician) {
    console.log('Nearest Electrician:', nearestElectrician);  // Debugging

    // Center the map on user's location
    map.setView([userLat, userLon], 13);

    // Create routing control to show route between user and nearest electrician
    let routingControl = L.Routing.control({
        waypoints: [
            L.latLng(userLat, userLon), // User's location
            L.latLng(nearestElectrician.lat, nearestElectrician.lon) // Nearest electrician's location
        ],
        routeWhileDragging: false, // Disables dragging of route
        show: true, // Ensures route is visible
        addWaypoints: false, // Disable adding new waypoints
        lineOptions: {
            styles: [{color: 'blue', opacity: 0.7, weight: 4}] // Customize the line appearance
        }
    }).addTo(map);

    routingControl.on('routesfound', function(e) {
        const routes = e.routes;
        console.log('Route found:', routes); // Debugging route found
    });

    routingControl.on('routingerror', function(err) {
        console.error('Routing error:', err); // Debugging any errors in routing
    });

    // Optionally, open the modal with electrician details
    fillModalWithElectricianDetails(nearestElectrician);
    document.getElementById("electricianModal").style.display = "block";
} else {
    console.log("No nearest electrician found!");
}
}
</script>


